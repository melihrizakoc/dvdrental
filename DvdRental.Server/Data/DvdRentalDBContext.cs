// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using DvdRental.Server.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Numerics;

namespace DvdRental.Server.Data;

public partial class DvdRentalDBContext : DbContext
{
    public DvdRentalDBContext(DbContextOptions<DvdRentalDBContext> options)
        : base(options) { }

    public virtual DbSet<actor> actors { get; set; }

    public virtual DbSet<category> categories { get; set; }

    public virtual DbSet<film> films { get; set; }

    public virtual DbSet<film_actor> film_actors { get; set; }

    public virtual DbSet<film_category> film_categories { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<actor>(entity =>
        {
            entity.HasKey(e => e.actor_id);

            entity.ToTable("actor");

            entity.Property(e => e.actor_id).ValueGeneratedNever();
            entity.Property(e => e.first_name)
                .IsRequired()
                .HasMaxLength(45);
            entity.Property(e => e.last_name)
                .IsRequired()
                .HasMaxLength(45);
            entity.Property(e => e.last_update).HasPrecision(6);
        });

        modelBuilder.Entity<category>(entity =>
        {
            entity.HasKey(e => e.category_id);

            entity.ToTable("category");

            entity.Property(e => e.category_id).ValueGeneratedNever();
            entity.Property(e => e.last_update).HasPrecision(6);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(25);
        });

        modelBuilder.Entity<film>(entity =>
        {
            entity.HasKey(e => e.film_id);

            entity.ToTable("film");

            entity.Property(e => e.film_id).ValueGeneratedNever();
            entity.Property(e => e.description).HasColumnType("ntext");
            entity.Property(e => e.fulltext).HasColumnType("ntext");
            entity.Property(e => e.last_update).HasPrecision(6);
            entity.Property(e => e.rating).HasMaxLength(127);
            entity.Property(e => e.rental_rate).HasColumnType("numeric(9, 2)");
            entity.Property(e => e.replacement_cost).HasColumnType("numeric(9, 2)");
            entity.Property(e => e.special_features).HasMaxLength(127);
            entity.Property(e => e.title)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<film_actor>(entity =>
        {
            entity.ToTable("film_actor");

            entity.HasIndex(e => new { e.actor_id, e.film_id }, "IDX_film_actor").IsUnique();

            entity.Property(e => e.last_update).HasPrecision(6);

            entity.HasOne(d => d.actor).WithMany(p => p.film_actors)
                .HasForeignKey(d => d.actor_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_film_actor_actor");

            entity.HasOne(d => d.film).WithMany(p => p.film_actors)
                .HasForeignKey(d => d.film_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_film_actor_film");
        });

        modelBuilder.Entity<film_category>(entity =>
        {
            entity.HasKey(e => e.film_id);

            entity.ToTable("film_category");

            entity.Property(e => e.film_id).ValueGeneratedNever();
            entity.Property(e => e.last_update).HasPrecision(6);

            entity.HasOne(d => d.category).WithMany(p => p.film_categories)
                .HasForeignKey(d => d.category_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_film_category_category");

            entity.HasOne(d => d.film).WithOne(p => p.film_category)
                .HasForeignKey<film_category>(d => d.film_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_film_category_film");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}